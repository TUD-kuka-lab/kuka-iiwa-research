<?xml version="1.0"?>
<!--|
Authors:  Leandro de Souza Rosa <l.desouzarosa@tudelft.nl>
          Rodrigo Perez-Dattari <r.j.perezdattari@tudelft.nl>
    Free for all, no warranties whatsoever.
|-->

<launch>
    <!-- Select the robot -->
    <arg name="arm_robot_name"/>
    <arg name="model" />
    <arg name="controller"/>
    <arg name="controller_server"/>
    <arg name="simulation" default="false"/>
    <arg name="x" default="0"/>

    <!-- Check for controllers types to choose interface -->
    <arg 
        if="$(eval (controller == 'PositionTorqueController') or (controller == 'TorqueController') or (controller == 'CartesianImpedanceController'))" 
        name="interface" 
        value="EffortJointInterface"
    />

    <arg 
        if="$(eval (controller == 'PositionController') or (controller == 'PositionTrajectoryController'))" 
        name="interface" 
        value="PositionJointInterface"
    />
        
    <!-- Set up varibales related to the namespaces -->
    <include file="$(find cor_tud_controllers)/launch/namespace.launch">
        <arg name="robot_name" value="$(arg arm_robot_name)"/>
        <arg name="model" value="$(arg model)"/>
    </include>
    
    <!-- load URDF models -->
    <param
        name="/$(arg arm_robot_name)$(arg model)_description"
        command="$(find xacro)/xacro --inorder 
        '$(find cor_tud_controllers)/urdf/$(arg arm_robot_name)$(arg model).urdf.xacro'
        hardware_interface:=$(arg interface)
        robot_name:=$(arg arm_robot_name)
        model:=$(arg model)"
    />

    <!-- Launch FRI drivers -->
    <include
        unless="$(arg simulation)"
        file="$(find cor_tud_controllers)/launch/drivers.launch">
        <arg name="model" value="$(arg model)"/>
        <arg name="robot_name" value="$(arg arm_robot_name)"/>
    </include>
    <!-- Launch Gazebo drivers and friends -->
    <include
        if="$(arg simulation)"
        file="$(find cor_tud_controllers)/launch/gazebo_drivers.launch">
        <arg name="model" value="$(arg model)"/>
        <arg name="robot_name" value="$(arg arm_robot_name)"/>
        <arg name="x" value="$(arg x)"/>
    </include>
    
    <!-- Spawn controller -->
    <include file="$(find cor_tud_controllers)/launch/control.launch">
        <arg name="robot_name" value="$(arg arm_robot_name)"/>
        <arg name="model" value="$(eval model)"/>
        <arg if="$(eval interface == 'EffortJointInterface')" name="controller" value="TorqueController"/>
        <arg if="$(eval interface == 'PositionJointInterface')" name="controller" value="PositionController"/>
    </include>
    
    <!-- Instantiate control server -->
    <include file="$(find cor_tud_controllers)/launch/control_server.launch">
        <arg name="robot_name" value="$(arg arm_robot_name)"/>
        <arg name="model" value="$(arg model)"/>
        <arg name="interface" value="$(arg interface)"/>
    </include>
    
      <!-- device info -->
  <arg name="device_id" default="1" doc="The ID of the device [1, 128]."/>
  <arg name="device_type" value="qbhand2m" doc="The type of the device [qbhand, qbmove, ...]."/>
  <arg name="device_name" default="$(arg device_type)$(arg device_id)" doc="The unique device name used in the yaml controller configurations (also in the urdf if not already specified there)."/>
  <!-- robot settings -->
  <arg name="control_duration" default="0.001" doc="The duration of the control loop [s]."/>
  <arg name="robot_hardware" default="[$(arg device_name)]" doc="The robot hardware interface names, e.g. [device1, device2, ...]."/>
  <arg name="robot_name" default="$(arg device_type)" doc="The unique robot name."/>
  <arg name="robot_namespace" default="$(arg device_name)" doc="The unique robot namespace."/>
  <arg name="robot_package" default="qb_hand" doc="The base package name prefix for the robot configurations [urdf, rviz, ...]."/>
  <arg name="source_list" default="[control/joint_states]" doc="The joint_states source list for the joint_state_publisher."/>
  <!-- read/write settings -->
  <arg name="get_currents" default="true" doc="Choose whether or not to retrieve current measurements from the device."/>
  <arg name="get_positions" default="true" doc="Choose whether or not to retrieve position measurements from the device."/>
  <arg name="get_distinct_packages" default="true" doc="Choose whether or not to retrieve current and position measurements from the device in two distinct packages."/>
  <arg name="max_repeats" default="3" doc="The maximum number of consecutive repetitions to mark retrieved data as corrupted."/>
  <arg name="set_commands" default="true" doc="Choose whether or not to send command positions to the device."/>
  <arg name="set_commands_async" default="true" doc="Choose whether or not to send commands without waiting for ack."/>
  <!-- initialization settings -->
  <arg name="activate_on_initialization" default="true" doc="Choose whether or not to activate the motors on node startup."/>
  <arg name="rescan_on_initialization" default="false" doc="Choose whether or not to rescan the serial ports on node startup."/>
  <arg name="use_fake_measurement_mode" default="false" doc="Choose whether or not to use previous command values instead of device measurements."/>
  <!-- launch settings -->
  <arg name="standalone" default="true" doc="Choose whether or not to start the Communication Handler."/>
  <arg name="use_controller_gui" default="false" doc="Choose whether or not to use the controller GUI."/>
  <arg name="use_gazebo" default="false" doc="Choose whether or not to use Gazebo instead of real devices."/>
  <arg name="use_rviz" default="false" doc="Choose whether or not to use rviz."/>
  <arg name="use_joint_limits" default="false" doc="Choose whether or not to use the robot joint limits."/>
  <arg name="use_waypoints" default="false" doc="Choose whether or not to use the waypoint references."/>
  <arg name="use_without_robot" default="true" doc="Choose whether or not to bring up robot description (e.g. when using with other robots is better to set it apart)."/>
  

  <group unless="$(arg use_gazebo)">
    <include file="$(find qb_device_driver)/launch/communication_handler.launch" if="$(arg standalone)"/>
  </group>

  <include file="$(find qb_device_bringup)/launch/device_bringup.launch" pass_all_args="true"/>

  <include file="$(find qb_device_bringup)/launch/robot_bringup.launch" pass_all_args="true"/>
</launch>
